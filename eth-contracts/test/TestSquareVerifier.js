// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require("Verifier");


contract('TestSquareVerifier', accounts => {

// - use the contents from proof.json generated from zokrates steps
const proof = require("./proof");
const tagProof = proof.proof;
const tagInputsValid = proof.inputs;
const inputsInvalid = [9, 9];
    
describe('test square verifier', function () {
    beforeEach(async function () { 
        // setup verifier
        this.contract = await Verifier.new({from:accounts[0]});
    })

// Test verification with correct proof
it('test verficiation with correct proof', async function () { 
    let compute = await this.contract.verifyTx.call(tagProof.a, tagProof.b, tagProof.c, tagInputsValid, {from:accounts[0]});
    assert.equal(compute, true, "Proof was not correct");
})

// Test verification with incorrect proof
it('test verficiation with incorrect proof', async function () { 
    let compute = await this.contract.verifyTx.call(tagProof.a, tagProof.b, tagProof.c, inputsInvalid, {from:accounts[0]});
    assert.equal(compute, false, "Proof was correct");
})


});


})
